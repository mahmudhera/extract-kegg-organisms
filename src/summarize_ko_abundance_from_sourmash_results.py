import argparse
import pandas as pd

def parse_args(): # pragma: no cover
    parser = argparse.ArgumentParser(description="This script will take a list of <gene_id, ko_id> mapping, and also take the results of sourmash gather. Then, this script will summarize the abundance information from gene level to KO level. The sourmash results are generated using this script: https://github.com/KoslickiLab/KEGG_sketching_annotation/blob/main/scripts/classify_sourmash.py",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--present_genes', type=str, help='file containing list of present genes and KO ids. Generated by main.py of the repo: https://github.com/mahmudhera/extract-kegg-organisms')
    parser.add_argument('--sourmash_output', type=str, help='file containing gene abundance information generated by sourmash gather')
    parser.add_argument('--out_file', type=str, help='file that will contain ko level abundance information.')
    args = parser.parse_args()
    return args

if __name__=='__main__':
    args = parse_args()
    present_genes_filename = args.present_genes
    sourmash_output_file = args.sourmash_output
    output_filename = args.out_file

    sm_output_df = pd.read_csv(sourmash_output_file)
    gene_names = [ name.split('|')[0] for name in sm_output_df['name'].tolist() ]
    weights = sm_output_df['f_unique_weighted'].tolist()
    total_weight = sum(weights)

    gene_koid_df = pd.read_csv(present_genes_filename)
    gene_ids = gene_koid_df['gene_id'].tolist()
    ko_ids = gene_koid_df['ko_id'].tolist()

    gene_id_to_ko_id = {}
    for gene_id, ko_id in list( zip(gene_ids, ko_ids) ):
        gene_id_to_ko_id[gene_id] = ko_id

    ko_abundances = {}
    for gene_name, weight in list( zip(gene_names, weights) ):
        abundance = 1.0 * weight / total_weight
        ko_id = gene_id_to_ko_id[gene_id]
        if ko_id in ko_abundances.keys():
            ko_abundances[ko_id] += abundance
        else:
            ko_abundances[ko_id] = abundance

    out_list = []
    for ko_id in ko_abundances.keys():
        out_list.append( (ko_id, abundance) )

    out_df = pd.DataFrame(out_list, columns=['ko_id', 'abundance'])
    out_df.to_csv( output_filename )
