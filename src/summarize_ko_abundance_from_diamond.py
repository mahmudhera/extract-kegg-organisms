import argparse
import pandas as pd

def parse_args(): # pragma: no cover
    parser = argparse.ArgumentParser(description="This script will take a list of <gene_id, ko_id> mapping, and also take the results of diamond. Then, this script will summarize the abundance information from gene level to KO level. The diamond results are generated using this script: https://github.com/KoslickiLab/KEGG_sketching_annotation/blob/main/scripts/classify_diamond.py",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--present_genes', type=str, help='file containing list of present genes and KO ids. Generated by main.py of the repo: https://github.com/mahmudhera/extract-kegg-organisms')
    parser.add_argument('--diamond_output', type=str, help='file containing gene abundance information generated by diamond')
    parser.add_argument('--out_file', type=str, help='file that will contain ko level abundance information.')
    args = parser.parse_args()
    return args

if __name__=='__main__':
    args = parse_args()
    present_genes_filename = args.present_genes
    diamond_output_file = args.diamond_output
    output_filename = args.out_file

    dmnd_output_df = pd.read_csv(diamond_output_file, delimiter='\t')
    read_names = [ name.split('$')[0] for name in dmnd_output_df['qseqid'].tolist() ]
    gene_names = [ name.split('|')[0] for name in dmnd_output_df['sseqid'].tolist() ]
    lengths = dmnd_output_df['length'].tolist()
    mismatches = dmnd_output_df['mismatch'].tolist()
    bitscores = dmnd_output_df['bitscore'].tolist()

    read_id_to_max_bitscore = {}
    for read_name, gene_name, length, num_mismatch, bitscore in list(zip(read_names, gene_names, lengths, mismatches, bitscores)):
        if read_name not in read_id_to_max_bitscore.keys():
            read_id_to_max_bitscore[read_name] = bitscore
        else:
            if bitscore > read_id_to_max_bitscore[read_name]:
                read_id_to_max_bitscore[read_name] = bitscore

    gene_name_to_num_nucleotides_mapped = {}
    gene_name_to_num_reads_mapped = {}
    for read_name, gene_name, length, num_mismatch, bitscore in list(zip(read_names, gene_names, lengths, mismatches, bitscores)):
        if read_id_to_max_bitscore[read_name] != bitscore:
            continue
        if gene_name not in gene_name_to_num_reads_mapped.keys():
            gene_name_to_num_reads_mapped[gene_name] = 1
            gene_name_to_num_nucleotides_mapped[gene_name] = (length - num_mismatch)
        else:
            gene_name_to_num_reads_mapped[gene_name] += 1
            gene_name_to_num_nucleotides_mapped[gene_name] += (length - num_mismatch)

    sum_nucleotides_mapped = sum( list(gene_name_to_num_nucleotides_mapped.values()) )
    sum_num_reads_mapped = sum( list(gene_name_to_num_reads_mapped.values()) )
    gene_abund_list = []
    for gene_name in gene_name_to_num_reads_mapped.keys():
        gene_abund_list.append( (gene_name, gene_name_to_num_nucleotides_mapped[gene_name]/sum_nucleotides_mapped, gene_name_to_num_reads_mapped[gene_name]/sum_num_reads_mapped) )

    gene_koid_df = pd.read_csv(present_genes_filename)
    gene_ids = gene_koid_df['gene_id'].tolist()
    ko_ids = gene_koid_df['ko_id'].tolist()

    gene_id_to_ko_id = {}
    for gene_id, ko_id in list( zip(gene_ids, ko_ids) ):
        gene_id_to_ko_id[gene_id] = ko_id

    ko_abund_by_num_nucleotides = {}
    ko_abund_by_num_reads = {}
    for gene_id, abund_by_num_nts, abund_by_num_reads in gene_abund_list:
        ko_id = gene_id_to_ko_id[gene_id]
        if ko_id not in ko_abund_by_num_reads.keys():
            ko_abund_by_num_reads[ko_id] = abund_by_num_reads
            ko_abund_by_num_nucleotides[ko_id] = abund_by_num_nts
        else:
            ko_abund_by_num_reads[ko_id] += abund_by_num_reads
            ko_abund_by_num_nucleotides[ko_id] += abund_by_num_nts

    out_list = []
    for ko_id in ko_abund_by_num_reads.keys():
        out_list.append( (ko_id, ko_abund_by_num_reads[ko_id], ko_abund_by_num_nucleotides[ko_id]) )

    out_df = pd.DataFrame(out_list, columns=['ko_id', 'abund_by_num_reads', 'abund_by_num_nts'])
    out_df.to_csv( output_filename )
